let stackGraphCategories,waterstofStockGraphConfig = {stackElements: [{indicator: 'Waterstofopslag',data: 'HYDROGEN_STORAGE_STOCK',color: '#3c39cc'}],valueLineElements: [],targetDiv: 'stackGraph_hydrogenStock',title: 'Waterstofopslag'},electricityProductionStackgraphConfig = {stackElements: [{indicator: 'Uit kern',data: 'ELEKTRICITEITSPRODUCTIE_KERNENERGIE',color: 'purple'}, {indicator: 'Uit kolen',data: 'COAL_FLEET_PRODUCTION_ELECTRICITY',color: '#333'}, {indicator: 'Uit gas',data: 'ELEKTRICITEITSPRODUCTIE_UIT_METHAAN',color: '#3c39cc'}, {indicator: 'Uit wind op zee',data: 'ELEKTRICITEITSPRODUCTIE_WIND_ZEE',color: '#00CED1'}, {indicator: 'Uit wind op land',data: 'ELEKTRICITEITSPRODUCTIE_WIND_LAND',color: '#1DE9B6'}, {indicator: 'Uit zon-PV',data: 'ELEKTRICITEITSPRODUCTIE_ZON',color: '#FFB300'}, {indicator: 'Uit batterijen',data: 'LI_ION_STORAGE_PRODUCTION2',color: '#C43C2C'}, {indicator: 'Uit import',data: 'ELECTRICITY_IMPORT_TOTAL',color: '#aaa'}],valueLineElements: [{indicator: 'Power demand (Excl. export)',data: 'POWER_DEMAND_TOTAL_EXCL_EXPORT',color: 'black',dash: '0',weight: 2}, {indicator: 'Power demand (Incl. export)',data: 'POWER_DEMAND_TOTAL_INCL_EXPORT',color: 'red',dash: '2,2',weight: 2}],targetDiv: 'stackGraph_electricityProduction',title: 'Aanbod elektriciteit'},electricityDemandStackgraphConfig = {stackElements: [{indicator: 'naar industrie',data: 'POWER_DEMAND_INDUSTRY_TOTAL',color: '#888888'}, {indicator: 'naar energiesector',data: 'POWER_DEMAND_EIGEN_VERBRUIK',color: '#4B9BC9'}, {indicator: 'naar gebouwde omgeving',data: 'POWER_DEMAND_GEBOUWDE_OMGEVING',color: '#DF6451'}, {indicator: 'naar landbouw',data: 'POWER_DEMAND_AGRICULTURE',color: '#61B980'}, {indicator: 'naar export',data: 'ELECTRICITY_EXPORT_TOTAL',color: '#aaa'}, {indicator: 'naar opslag',data: 'LI_ION_STORAGE_CONSOMMATION2',color: '#9768B8'}],valueLineElements: [{indicator: 'Fossiele elektriciteitsproductie',data: 'ELEKTRICITEITSPRODUCTIE_UIT_FOSSIEL',color: 'rgba(0,0,0,0.5)',dash: '1,1',weight: 2}],targetDiv: 'stackGraph_electricityDemand',title: 'Vraag elektriciteit'}
function drawStackGraph (t) {let e = aggregates
  document.getElementById(t.targetDiv).innerHTML = '';let a = parseInt(getComputedStyle(document.querySelector('#' + t.targetDiv)).padding.slice(0, -2)),r = document.querySelector('#' + t.targetDiv).offsetWidth - 2 * a,n = document.querySelector('#' + t.targetDiv).offsetHeight - 2 * a - 70 - 100
  d3.select('#' + t.targetDiv).append('div').attr('id', t.targetDiv + '_title').style('width', r + 'px').style('height', '70px').style('position', 'absolute').style('top', '0px').style('left', '0px'), d3.select('#' + t.targetDiv).append('div').attr('id', t.targetDiv + '_plot').style('width', r + 'px').style('height', n + 'px').style('position', 'absolute').style('top', '70px').style('left', '0px'), d3.select('#' + t.targetDiv).append('div').attr('id', t.targetDiv + '_legend').style('width', r + 'px').style('height', '100px').style('position', 'absolute').style('top', 70 + n + 'px').style('left', '0px'), d3.select('#' + t.targetDiv + '_title_svg').remove(), d3.select('#' + t.targetDiv + '_plot_svg').remove(), d3.select('#' + t.targetDiv + '_legend_svg').remove(), d3.select('#' + t.targetDiv + '_title').append('svg').attr('id', t.targetDiv + '_title_svg').style('width', r + 'px').style('height', '70px'), d3.select('#' + t.targetDiv + '_plot').append('svg').attr('id', t.targetDiv + '_plot_svg').style('width', r + 'px').style('height', n + 'px'), d3.select('#' + t.targetDiv + '_legend').append('svg').attr('id', t.targetDiv + '_legend_svg').style('width', r + 'px').style('height', '100px'), function () {graphViewerCanvas_title = d3.select('#' + t.targetDiv + '_title_svg').append('g'), graphViewerCanvas_plot = d3.select('#' + t.targetDiv + '_plot_svg').append('g'), graphViewerCanvas_legend = d3.select('#' + t.targetDiv + '_legend_svg').append('g');let a = generateDatesForYear(2035),o = []
    for (i = 0;i < a.length;i++) { for ((y = {}).date = a[i], k = 0;k < t.stackElements.length;k++)e[t.stackElements[k].data] ? y[t.stackElements[k].indicator] = e[t.stackElements[k].data][i] : console.log('WARNING: unknown aggregration key "' + t.stackElements[k].data + '"');o.push(y)}let l = r - 150 - 60,d = n - 70
    graphViewerCanvas_title.append('text').style('font-size', '28px').attr('x', 100).attr('y', 60).text(t.title), function () {let e = 0
      for (i = 0;i < t.stackElements.length;i++)graphViewerCanvas_legend.append('rect').attr('width', 15).attr('height', 15).attr('x', 100 + e).attr('y', 10).attr('fill', t.stackElements[i].color), graphViewerCanvas_legend.append('text').style('font-size', '14px').attr('x', 125 + e).attr('y', 22).text(t.stackElements[i].indicator), e += getTextWidth(t.stackElements[i].indicator, '14px Rijksoverheid') + 30; for (e = 0, i = 0;i < t.valueLineElements.length;i++)graphViewerCanvas_legend.append('line').attr('x1', 100 + e).attr('x2', 100 + e + 35).attr('y1', 55).attr('y2', 55).style('stroke-dasharray', t.valueLineElements[i].dash).style('stroke-width', t.valueLineElements[i].weight).style('stroke', t.valueLineElements[i].color), graphViewerCanvas_legend.append('text').style('font-size', '14px').attr('x', 130 + e + 20).attr('y', 60).text(t.valueLineElements[i].indicator), e += getTextWidth(t.valueLineElements[i].indicator, '14px Rijksoverheid') + 70}(), e = o;const s = Object.keys(o[0]).filter((t => 'date' !== t))
    stackGraphCategories = s;d3.timeParse('%Y/%m/%d %H:%M');const c = d3.stack().keys(s).order(d3.stackOrderNone).offset(d3.stackOffsetDiverging)(e)
    var p = d3.scaleTime().range([0, l]),g = d3.scaleLinear().range([d, 0]),h = d3.area().x((function (t) {return p(t.data.date)})).y0((function (t) {return g(t[0])})).y1((t => g(t[1])))
    d3.scaleOrdinal().domain(s).range(d3.schemeCategory10);if ('Year' == graphViewMode)p.domain(d3.extent(e, (function (t) {return t.date}))), g.domain([d3.min(c, (t => d3.min(t, (t => t[0])))), d3.max(c, (t => d3.max(t, (t => t[1]))))])
    else if ('Month' == graphViewMode || 'Week' == graphViewMode) {var u = []
      for (i = 0;i < c.length;i++)u.push(c[i].slice(lowerMonthBound, upperMonthBound));p.domain(d3.extent(e.slice(lowerMonthBound, upperMonthBound), (function (t) {return t.date}))), g.domain([d3.min(u, (t => d3.min(t, (t => Math.min(t[0], t[1]))))), d3.max(u, (t => d3.max(t, (t => Math.max(t[0], t[1])))))])}let v = 100
    graphViewerCanvas_plot.append('g').attr('class', 'grid').call(d3.axisLeft(g).ticks(5).tickSize(-l).tickFormat('')).attr('fill', 'white').attr('transform', 'translate(100,35)');let f = []
    t.stackElements.forEach((t => {
      f.push(t.color)})), graphViewerCanvas_plot.append('g').selectAll('path').data((function () {if ('Year' === graphViewMode)return c;if ('Month' === graphViewMode || 'Week' === graphViewMode) {var t = []
        for (i = 0;i < c.length;i++)t.push(c[i].slice(lowerMonthBound, upperMonthBound));return t}})).enter().append('path').attr('id', 'graphPath_' + t.targetDiv).attr('fill', (function (t, e) {return f[e]})).attr('d', h).attr('transform', 'translate(100,35)'), ypos = d + 35, graphViewerCanvas_plot.append('g').attr('transform', 'translate(100,' + ypos + ')').style('font-size', '14px').call(d3.axisBottom(p).ticks(10).tickFormat(d3.timeFormat('%m/%d'))), graphViewerCanvas_plot.append('g').call(d3.axisLeft(g).ticks(5)).style('font-size', '14px').attr('transform', 'translate(100,35)'), graphViewerCanvas_plot.append('rect').attr('class', 'graphCursor').attr('width', 2).style('opacity', .5).attr('height', d + 25).attr('y', 10).attr('fill', '#9F264E'), graphViewerCanvas_plot.append('text').attr('class', 'graphCursor').attr('id', 'graphIndicatorValue_' + t.indicator).attr('y', 25).style('fill', '#9F264E').style('font-weight', 800).style('text-anchor', 'end').html('...');var _ = n / 2 + 30
    graphViewerCanvas_plot.append('text').attr('x', 20).attr('y', 50).text('MW(h)').style('text-anchor', 'middle').attr('transform', 'translate(-15,' + _ + ')rotate(-90)'), graphViewerCanvas_plot.append('rect').attr('id', 'graphSelectionCursor_' + t.targetDiv).attr('fill', '#333').attr('x', 20).attr('y', 35).attr('width', 2).attr('height', d).style('visibility', 'hidden'), document.querySelector('#' + t.targetDiv + '_plot_svg').addEventListener('mouseover', (function (e) {d3.select('#graphSelectionCursor_' + t.targetDiv).style('visibility', 'visible')})), document.querySelector('#' + t.targetDiv + '_plot_svg').addEventListener('mousemove', (function (e) {var a = this.getBoundingClientRect(),i = e.clientX - a.left
      e.x < a.left + v + r - 210 && e.x > a.left + 100 && d3.select('#graphSelectionCursor_' + t.targetDiv).attr('x', i)})), document.querySelector('#' + t.targetDiv + '_plot_svg').addEventListener('mouseout', (function (e) {d3.select('#graphSelectionCursor_' + t.targetDiv).style('visibility', 'hidden')})), document.querySelector('#' + t.targetDiv + '_plot_svg').addEventListener('mousedown', (function (e) {var a = this.getBoundingClientRect(),i = e.clientX - a.left
      if (e.x < a.left + v + r - 210) {if ('Year' == graphViewMode) {var n = d3.select('#graphPath_' + t.targetDiv).node().getBBox().width,o = d3.select('#graphPath_' + t.targetDiv).node().getBBox().x + 100
          timelinePosition = Math.round((i - o) / n * 8760)}else if ('Month' == graphViewMode || 'Week' == graphViewMode) {n = d3.select('#graphPath_' + t.targetDiv).node().getBBox().width, o = d3.select('#graphPath_' + t.targetDiv).node().getBBox().x + 100;timelinePosition = Math.round((i - o) / n * (upperMonthBound - lowerMonthBound)) + lowerMonthBound}'paused' == playState && (timelinePosition -= 1, tick())}}));let E = []
    for (k = 0;k < t.valueLineElements.length;k++) {var y
      for ((y = {}).date = a, y.data = [], y.indicator = t.valueLineElements[k].indicator, y.color = t.valueLineElements[k].color, y.dash = t.valueLineElements[k].dash, y.weight = t.valueLineElements[k].weight, i = 0;i < y.date.length;i++)aggregates[t.valueLineElements[k].data] ? y.data.push(aggregates[t.valueLineElements[k].data][i]) : (console.log('WARNING: unknown aggregration key "' + t.valueLineElements[k].data + '"'), y.data.push(0));E.push(y)}let w = []
    for (i = 0;i < E.length;i++) for (w.push({indicator: E[i].indicator,color: E[i].color,dash: E[i].dash,weight: E[i].weight,data: []}), w[E[i].indicator] = [], k = 0;k < E[i].date.length;k++)w[i].data.push({x: E[i].date[k],y: E[i].data[k]});var m = d3.line().x((function (t) {return p(t.x)})).y((function (t) {return g(parseFloat(t.y))}))
    for (i = 0;i < w.length;i++) {var x = w[i].color,D = w[i].dash,C = w[i].weight
      graphViewerCanvas_plot.append('g').append('path').data((function () {return 'Month' != graphViewMode && 'Week' != graphViewMode || (w[i].data = w[i].data.slice(lowerMonthBound, upperMonthBound)), [w[i].data]})).attr('class', 'line').attr('fill', 'none').style('stroke', x).style('stroke-width', C).style('stroke-dasharray', D).attr('d', m).attr('transform', 'translate(100,35)')}}(), graphViewerCanvas_plot.append('rect').attr('id', '').attr('width', 60).attr('height', 30).attr('fill', (function () {return 'Year' == graphViewMode ? '#546689' : '#FFF'})).style('stroke', '#546689').attr('x', r - 85).attr('y', 35).style('pointer-events', 'all').on('click', (function () {graphViewMode = 'Year', flagYearMonthWeekSwitch = !0, updateGraphViews.forEach((t => {
      'stackGraph' == t.caller && drawStackGraph(t.config), 'residualLoadDurationCurve' == t.caller && drawResidualLoadDurationCurve(t.config)}))})), graphViewerCanvas_plot.append('text').style('font-size', '15px').attr('id', '').attr('fill', (function () {return 'Year' == graphViewMode ? '#FFF' : '#546689'})).attr('x', r - 55).attr('y', 55).style('text-anchor', 'middle').style('pointer-events', 'none').text('Jaar'), graphViewerCanvas_plot.append('rect').attr('id', '').attr('width', 60).attr('height', 30).attr('fill', (function () {return 'Month' == graphViewMode ? '#546689' : '#FFF'})).style('stroke', '#546689').attr('x', r - 85).attr('y', 70).style('pointer-events', 'all').on('click', (function () {graphViewMode = 'Month', flagYearMonthWeekSwitch = !0, updateGraphViews.forEach((t => {
      'stackGraph' == t.caller && drawStackGraph(t.config), 'residualLoadDurationCurve' == t.caller && drawResidualLoadDurationCurve(t.config)}))})), graphViewerCanvas_plot.append('text').style('font-size', '15px').attr('id', '').style('pointer-events', 'none').attr('fill', (function () {return 'Month' == graphViewMode ? '#FFF' : '#546689'})).attr('x', r - 55).attr('y', 90).style('text-anchor', 'middle').text('Maand'), graphViewerCanvas_plot.append('rect').attr('id', '').attr('width', 60).attr('height', 30).attr('fill', (function () {return 'Week' == graphViewMode ? '#546689' : '#FFF'})).style('stroke', '#546689').attr('x', r - 85).attr('y', 105).style('pointer-events', 'all').on('click', (function () {graphViewMode = 'Week', flagYearMonthWeekSwitch = !0, updateGraphViews.forEach((t => {
      'stackGraph' == t.caller && drawStackGraph(t.config), 'residualLoadDurationCurve' == t.caller && drawResidualLoadDurationCurve(t.config)}))})), graphViewerCanvas_plot.append('text').style('font-size', '15px').attr('id', '').style('pointer-events', 'none').attr('fill', (function () {return 'Week' == graphViewMode ? '#FFF' : '#154273'})).attr('x', r - 55).attr('y', 126).style('text-anchor', 'middle').text('Week')}function generateDatesForYear (t) {const e = []
  for (let r = 1;r <= 12;r++) {const i = new Date(t, r, 0).getDate(),n = r.toString().padStart(2, '0')
    for (let r = 1;r <= i;r++) {const i = r.toString().padStart(2, '0')
      for (let r = 0;r < 24;r++) {const o = `${t}/${n}/${i} ${r.toString().padStart(2,"0")}:00+0000`
        var a = d3.timeParse('%Y/%m/%d %H:%M')
        e.push(a(o.slice(0, -5)))}}}return e}updateGraphViews.push({config: electricityProductionStackgraphConfig,targetDiv: 'stackGraph_electricityProduction',caller: 'stackGraph'}), updateGraphViews.push({config: electricityDemandStackgraphConfig,targetDiv: 'stackGraph_electricityDemand',caller: 'stackGraph'})
