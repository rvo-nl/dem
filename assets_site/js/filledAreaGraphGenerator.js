let graphViewerCanvas,yscale_graph0,yscale_graph1,yscale_graph2,graphViewMode = 'Year',currentIndicator = {graph0: '',graph1: '',graph2: ''}
function drawAreaGraph (t) {console.log(graphViewMode);let e = parseInt(getComputedStyle(document.querySelector('#' + t.targetDiv)).padding.slice(0, -2)),a = document.querySelector('#' + t.targetDiv).offsetWidth - 2 * e,r = document.querySelector('#' + t.targetDiv).offsetHeight - 2 * e
  d3.select('#' + t.targetDiv + '_svg').remove(), d3.select('#' + t.targetDiv).append('svg').attr('id', t.targetDiv + '_svg').style('width', a + 'px').style('height', r + 'px'), function (t, e, i, n) {graphViewerCanvas = d3.select('#' + n.targetDiv + '_svg').append('g'), data = timeseriesLib;let o = a - 150 - 60,d = r - 70
    var l = d3.timeParse('%Y/%m/%d %H:%M'),s = d3.scaleTime().range([0, o]),p = d3.scaleLinear().range([d, 0]),h = d3.area().x((function (t) {return s(t.date)})).y0(d).y1((function (e) {return p(parseFloat(e[t]))}))
    'Year' === graphViewMode ? data.forEach((function (t) {t.date = l(t.timeseries.slice(0, -5))})) : 'Month' !== graphViewMode && 'Week' !== graphViewMode || data.slice(lowerMonthBound, upperMonthBound).forEach((function (t) {t.date = l(t.timeseries.slice(0, -5))}))
    'Year' === graphViewMode ? (s.domain(d3.extent(data, (function (t) {return t.date}))), p.domain([0, d3.max(data, (function (e) {return parseFloat(e[t])}))]), window['yscale_graph_' + n.targetDiv] = d3.max(data, (function (e) {return parseFloat(e[t])}))) : 'Month' !== graphViewMode && 'Week' !== graphViewMode || (s.domain(d3.extent(data.slice(lowerMonthBound, upperMonthBound), (function (t) {return t.date}))), p.domain([0, d3.max(data.slice(lowerMonthBound, upperMonthBound), (function (e) {return parseFloat(e[t])}))]), window['yscale_graph_' + n.targetDiv] = d3.max(data.slice(lowerMonthBound, upperMonthBound), (function (e) {return parseFloat(e[t])})));let c = 100
    graphViewerCanvas.append('g').attr('class', 'grid').call(d3.axisLeft(p).ticks(5).tickSize(-o).tickFormat('')).attr('fill', 'white').attr('transform', 'translate(100,35)'), graphViewerCanvas.append('g').attr('id', 'graphPath_' + n.targetDiv).append('path').data((function () {return 'Year' === graphViewMode ? [data] : 'Month' === graphViewMode || 'Week' === graphViewMode ? (console.log([data.slice(lowerMonthBound, upperMonthBound)]), [data.slice(lowerMonthBound, upperMonthBound)]) : void 0})).attr('class', 'area').attr('fill', n.color).style('opacity', .7).attr('d', h).attr('transform', 'translate(100,35)'), ypos = d + 35, graphViewerCanvas.append('g').attr('transform', 'translate(100,' + ypos + ')').style('font-size', '14px').call(d3.axisBottom(s).ticks(10).tickFormat(d3.timeFormat('%m/%d'))), graphViewerCanvas.append('g').call(d3.axisLeft(p).ticks(5)).style('font-size', '14px').attr('transform', 'translate(100,35)'), graphViewerCanvas.append('rect').attr('class', 'graphCursor').attr('width', 2).style('opacity', .5).attr('height', d + 25).attr('y', 10).attr('fill', '#9F264E'), graphViewerCanvas.append('text').attr('class', 'graphCursor').attr('id', 'graphIndicatorValue_' + n.indicator).attr('y', 25).style('fill', '#9F264E').style('font-weight', 800).style('text-anchor', 'end').html('...');var g = r / 2 + 30
    graphViewerCanvas.append('text').attr('x', 20).attr('y', 50).text('MW(h)').style('text-anchor', 'middle').attr('transform', 'translate(-15,' + g + ')rotate(-90)'), graphViewerCanvas.append('rect').attr('id', 'graphSelectionCursor_' + n.targetDiv).attr('fill', '#333').attr('x', 20).attr('y', 35).attr('width', 2).attr('height', d).style('visibility', 'hidden'), document.querySelector('#' + n.targetDiv + '_svg').addEventListener('mouseover', (function (t) {var e = this.getBoundingClientRect()
      t.clientX, e.left;t.x < e.left + c + a - 300 && t.x > e.left + 90 && d3.select('#graphSelectionCursor_' + n.targetDiv).style('visibility', 'visible')})), document.querySelector('#' + n.targetDiv + '_svg').addEventListener('mousemove', (function (t) {var e = this.getBoundingClientRect(),r = t.clientX / .9 - e.left - 20
      t.x < e.left + c + a - 300 && t.x > e.left + 90 && d3.select('#graphSelectionCursor_' + n.targetDiv).attr('x', r)})), document.querySelector('#' + n.targetDiv + '_svg').addEventListener('mouseout', (function (t) {d3.select('#graphSelectionCursor_' + n.targetDiv).style('visibility', 'hidden')})), document.querySelector('#' + n.targetDiv + '_svg').addEventListener('mousedown', (function (t) {var e = this.getBoundingClientRect(),r = t.clientX / .9 - e.left - 20
      if (t.x < e.left + c + a - 300) {if ('Year' == graphViewMode) {var i = d3.select('#graphPath_' + n.targetDiv).node().getBBox().width,o = d3.select('#graphPath_' + n.targetDiv).node().getBBox().x
          timelinePosition = Math.round((r - o) / i * 8760)}else if ('Month' === graphViewMode || 'Week' === graphViewMode) {i = d3.select('#graphPath_' + n.targetDiv).node().getBBox().width, o = d3.select('#graphPath_' + n.targetDiv).node().getBBox().x;console.log(o), timelinePosition = Math.round((r - o) / i * (upperMonthBound - lowerMonthBound)) + lowerMonthBound}'paused' == playState && (timelinePosition -= 1, tick())}}))}(t.indicator, 0, 0, t), graphViewerCanvas.append('rect').attr('id', '').attr('width', 60).attr('height', 30).attr('fill', (function () {return 'Year' == graphViewMode ? '#546689' : '#FFF'})).style('stroke', '#546689').attr('x', a - 85).attr('y', 35).style('pointer-events', 'all').on('click', (function () {graphViewMode = 'Year', timelinePosition -= 1, tick(), console.log(updateGraphViews), updateGraphViews.forEach((t => {
      console.log(t), drawAreaGraph(t)})), updateGraphViews.forEach((t => {
      'stackGraph' != t.caller && 'residualLoadDurationCurve' != t.caller && drawAreaGraph(t), timelinePosition -= 1, tick()}))})), graphViewerCanvas.append('text').attr('id', '').attr('fill', (function () {return 'Year' == graphViewMode ? '#FFF' : '#546689'})).attr('x', a - 55).attr('y', 55).style('text-anchor', 'middle').style('pointer-events', 'none').text('Jaar'), graphViewerCanvas.append('rect').attr('id', '').attr('width', 60).attr('height', 30).attr('fill', (function () {return 'Month' == graphViewMode ? '#546689' : '#FFF'})).style('stroke', '#546689').attr('x', a - 85).attr('y', 70).style('pointer-events', 'all').on('click', (function () {graphViewMode = 'Month', timelinePosition -= 1, tick(), console.log(updateGraphViews), updateGraphViews.forEach((t => {
      'stackGraph' != t.caller && 'residualLoadDurationCurve' != t.caller && drawAreaGraph(t), timelinePosition -= 1, tick()}))})), graphViewerCanvas.append('text').attr('id', '').style('pointer-events', 'none').attr('fill', (function () {return 'Month' === graphViewMode ? '#FFF' : '#546689'})).attr('x', a - 55).attr('y', 90).style('text-anchor', 'middle').text('Maand'), graphViewerCanvas.append('rect').attr('id', '').attr('width', 60).attr('height', 30).attr('fill', (function () {return 'Week' === graphViewMode ? '#546689' : '#FFF'})).style('stroke', '#546689').attr('x', a - 85).attr('y', 105).style('pointer-events', 'all').on('click', (function () {graphViewMode = 'Week', timelinePosition -= 1, tick(), console.log(updateGraphViews), updateGraphViews.forEach((t => {
      'stackGraph' != t.caller && 'residualLoadDurationCurve' != t.caller && drawAreaGraph(t), timelinePosition -= 1, tick()}))})), graphViewerCanvas.append('text').attr('id', '').style('pointer-events', 'none').attr('fill', (function () {return 'Week' === graphViewMode ? '#FFF' : '#546689'})).attr('x', a - 55).attr('y', 125).style('text-anchor', 'middle').text('Week')}graphViewMode = 'Week'
